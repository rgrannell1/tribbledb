function w(n,e="r\xF3"){if(!n.startsWith(`urn:${e}:`))throw new Error(`Invalid URN for namespace ${e}: ${n}`);let t=n.split(":")[2],[r,i]=n.split("?"),d=r.split(":")[3],u=i?Object.fromEntries(new URLSearchParams(i)):{};return{type:t,id:d,qs:u}}function b(n,e="r\xF3"){try{return w(n,e)}catch{return{type:"unknown",id:n,qs:{}}}}var o=class{static source(e){return e[0]}static relation(e){return e[1]}static target(e){return e[2]}};var g=class{#t;#e;#r;constructor(){this.#t=0,this.#e=new Map,this.#r=new Map}map(){return this.#e}reverseMap(){return this.#r}add(e){return this.#e.has(e)?this.#e.get(e):(this.#e.set(e,this.#t),this.#r.set(this.#t,e),this.#t++,this.#t-1)}getIndex(e){return this.#e.get(e)}getValue(e){return this.#r.get(e)}has(e){return this.#e.has(e)}},l=class{static intersection(e,t){if(t.length===0)return new Set;t.sort((i,d)=>i.size-d.size);let r=new Set(t[0]);for(let i=1;i<t.length;i++){let d=t[i];for(let u of r)e.setCheck(),d.has(u)||r.delete(u);if(r.size===0)break}return r}};var f=class{mapReadCount;constructor(){this.mapReadCount=0}mapRead(){this.mapReadCount++}},m=class{setCheckCount;constructor(){this.setCheckCount=0}setCheck(){this.setCheckCount++}};var x=class{indexedTriples;stringIndex;sourceType;sourceId;sourceQs;relations;targetType;targetId;targetQs;metrics;constructor(e){this.indexedTriples=[],this.stringIndex=new g,this.sourceType=new Map,this.sourceId=new Map,this.sourceQs=new Map,this.relations=new Map,this.targetType=new Map,this.targetId=new Map,this.targetQs=new Map,this.indexTriples(e),this.metrics=new f}indexTriples(e){for(let t=0;t<e.length;t++)this.indexTriple(e[t],t)}indexTriple(e,t){let r=b(o.source(e)),i=o.relation(e),d=b(o.target(e)),u=this.stringIndex.add(r.type),c=this.stringIndex.add(r.id),s=this.stringIndex.add(i),p=this.stringIndex.add(d.type),a=this.stringIndex.add(d.id);this.indexedTriples.push([this.stringIndex.add(o.source(e)),s,this.stringIndex.add(o.target(e))]),this.sourceType.has(u)||this.sourceType.set(u,new Set),this.sourceType.get(u).add(t),this.sourceId.has(c)||this.sourceId.set(c,new Set),this.sourceId.get(c).add(t);for(let[T,I]of Object.entries(r.qs)){let h=this.stringIndex.add(`${T}=${I}`);this.sourceQs.has(h)||this.sourceQs.set(h,new Set),this.sourceQs.get(h).add(t)}this.relations.has(s)||this.relations.set(s,new Set),this.relations.get(s).add(t),this.targetType.has(p)||this.targetType.set(p,new Set),this.targetType.get(p).add(t),this.targetId.has(a)||this.targetId.set(a,new Set),this.targetId.get(a).add(t);for(let[T,I]of Object.entries(d.qs)){let h=this.stringIndex.add(`${T}=${I}`);this.targetQs.has(h)||this.targetQs.set(h,new Set),this.targetQs.get(h).add(t)}}add(e){let t=this.indexedTriples.length;for(let r=0;r<e.length;r++)this.indexTriple(e[r],t+r)}get length(){return this.indexedTriples.length}triples(){return this.indexedTriples.map(([e,t,r])=>[this.stringIndex.getValue(e),this.stringIndex.getValue(t),this.stringIndex.getValue(r)])}getTriple(e){if(e<0||e>=this.indexedTriples.length)return;let[t,r,i]=this.indexedTriples[e];return[this.stringIndex.getValue(t),this.stringIndex.getValue(r),this.stringIndex.getValue(i)]}getSourceTypeSet(e){let t=this.stringIndex.getIndex(e);if(t!==void 0)return this.metrics.mapRead(),this.sourceType.get(t)}getSourceIdSet(e){let t=this.stringIndex.getIndex(e);if(t!==void 0)return this.metrics.mapRead(),this.sourceId.get(t)}getSourceQsSet(e,t){let r=this.stringIndex.getIndex(`${e}=${t}`);if(r!==void 0)return this.metrics.mapRead(),this.sourceQs.get(r)}getRelationSet(e){let t=this.stringIndex.getIndex(e);if(t!==void 0)return this.metrics.mapRead(),this.relations.get(t)}getTargetTypeSet(e){let t=this.stringIndex.getIndex(e);if(t!==void 0)return this.metrics.mapRead(),this.targetType.get(t)}getTargetIdSet(e){let t=this.stringIndex.getIndex(e);if(t!==void 0)return this.metrics.mapRead(),this.targetId.get(t)}getTargetQsSet(e,t){let r=this.stringIndex.getIndex(`${e}=${t}`);if(r!==void 0)return this.metrics.mapRead(),this.targetQs.get(r)}};var S=class n{index;triplesCount;tripleRows;metrics;constructor(e){this.index=new x(e),this.triplesCount=this.index.length,this.tripleRows=new Set,this.metrics=new m;for(let t=0;t<this.triplesCount;t++)this.tripleRows.add(t)}static of(e){return new n(e)}static from(e){let t=[];for(let r of e){let{id:i,...d}=r;if(typeof i!="string")throw new Error("Each TripleObject must have a string id.");for(let[u,c]of Object.entries(d))if(Array.isArray(c))for(let s of c)t.push([i,u,s]);else t.push([i,u,c])}return new n(t)}add(e){let t=this.index.length;this.index.add(e),this.triplesCount=this.index.length;for(let r=t;r<this.triplesCount;r++)this.tripleRows.add(r)}map(e){return new n(this.index.triples().map(e))}flatMap(e){let t=this.index.triples().flatMap(e);return new n(t)}firstTriple(){return this.index.length>0?this.index.getTriple(0):void 0}firstSource(){let e=this.firstTriple();return e?o.source(e):void 0}firstRelation(){let e=this.firstTriple();return e?o.relation(e):void 0}firstTarget(){let e=this.firstTriple();return e?o.target(e):void 0}firstObject(){return this.objects()[0]}triples(){return this.index.triples()}sources(){return new Set(this.index.triples().map(o.source))}relations(){return new Set(this.index.triples().map(o.relation))}targets(){return new Set(this.index.triples().map(o.target))}objects(){let e={};for(let[r,i,d]of this.index.triples())e[r]||(e[r]={}),e[r][i]?Array.isArray(e[r][i])?e[r][i].push(d):e[r][i]=[e[r][i],d]:e[r][i]=d;let t=[];for(let[r,i]of Object.entries(e))i.id=r,t.push(i);return t}search(e){let t=[this.tripleRows],{source:r,relation:i,target:d}=e;if(r){if(r.type){let s=this.index.getSourceTypeSet(r.type);if(s)t.push(s);else return new n([])}if(r.id){let s=this.index.getSourceIdSet(r.id);if(s)t.push(s);else return new n([])}if(r.qs)for(let[s,p]of Object.entries(r.qs)){let a=this.index.getSourceQsSet(s,p);if(a)t.push(a);else return new n([])}}if(d){if(d.type){let s=this.index.getTargetTypeSet(d.type);if(s)t.push(s);else return new n([])}if(d.id){let s=this.index.getTargetIdSet(d.id);if(s)t.push(s);else return new n([])}if(d.qs)for(let[s,p]of Object.entries(d.qs)){let a=this.index.getTargetQsSet(s,p);if(a)t.push(a);else return new n([])}}if(i){let s=this.index.getRelationSet(i);if(s)t.push(s);else return new n([])}let u=l.intersection(this.metrics,t),c=[];for(let s of u){let p=this.index.getTriple(s);if(!r?.predicate&&!d?.predicate){c.push(p);continue}let a=!0;r?.predicate&&(a=a&&r.predicate(o.source(p))),d?.predicate&&(a=a&&d.predicate(o.target(p))),a&&c.push(p)}return new n(c)}getMetrics(){return{index:this.index.metrics,db:this.metrics}}};export{S as TribbleDB,b as asUrn,w as parseUrn};
//# sourceMappingURL=mod.ts.map
