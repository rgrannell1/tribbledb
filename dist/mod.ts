function m(d,e="r\xF3"){if(!d.startsWith(`urn:${e}:`))throw new Error(`Invalid URN for namespace ${e}: ${d}`);let t=d.split(":")[2],[r,n]=d.split("?"),i=r.split(":")[3],g=n?Object.fromEntries(new URLSearchParams(n)):{};return{type:t,id:i,qs:g}}function I(d,e="r\xF3"){try{return m(d,e)}catch{return{type:"unknown",id:d,qs:{}}}}var l=class{#t;#e;#r;constructor(){this.#t=0,this.#e=new Map,this.#r=new Map}map(){return this.#e}reverseMap(){return this.#r}add(e){return this.#e.has(e)?this.#e.get(e):(this.#e.set(e,this.#t),this.#r.set(this.#t,e),this.#t++,this.#t-1)}getIndex(e){return this.#e.get(e)}getValue(e){return this.#r.get(e)}has(e){return this.#e.has(e)}},f=class{static intersection(e){if(e.length===0)return new Set;e.sort((r,n)=>r.size-n.size);let t=new Set(e[0]);for(let r=1;r<e.length;r++){let n=e[r];for(let i of t)n.has(i)||t.delete(i);if(t.size===0)break}return t}};var x=class{indexedTriples;stringIndex;sourceType;sourceId;sourceQs;relations;targetType;targetId;targetQs;constructor(e){this.indexedTriples=[],this.stringIndex=new l,this.sourceType=new Map,this.sourceId=new Map,this.sourceQs=new Map,this.relations=new Map,this.targetType=new Map,this.targetId=new Map,this.targetQs=new Map,this.indexTriples(e)}indexTriples(e){for(let t=0;t<e.length;t++)this.indexTriple(e[t],t)}indexTriple(e,t){let r=I(o.source(e)),n=o.relation(e),i=I(o.target(e)),g=this.stringIndex.add(r.type),u=this.stringIndex.add(r.id),s=this.stringIndex.add(n),a=this.stringIndex.add(i.type),p=this.stringIndex.add(i.id);this.indexedTriples.push([this.stringIndex.add(o.source(e)),s,this.stringIndex.add(o.target(e))]),this.sourceType.has(g)||this.sourceType.set(g,new Set),this.sourceType.get(g).add(t),this.sourceId.has(u)||this.sourceId.set(u,new Set),this.sourceId.get(u).add(t);for(let[h,T]of Object.entries(r.qs)){let c=this.stringIndex.add(`${h}=${T}`);this.sourceQs.has(c)||this.sourceQs.set(c,new Set),this.sourceQs.get(c).add(t)}this.relations.has(s)||this.relations.set(s,new Set),this.relations.get(s).add(t),this.targetType.has(a)||this.targetType.set(a,new Set),this.targetType.get(a).add(t),this.targetId.has(p)||this.targetId.set(p,new Set),this.targetId.get(p).add(t);for(let[h,T]of Object.entries(i.qs)){let c=this.stringIndex.add(`${h}=${T}`);this.targetQs.has(c)||this.targetQs.set(c,new Set),this.targetQs.get(c).add(t)}}add(e){let t=this.indexedTriples.length;for(let r=0;r<e.length;r++)this.indexTriple(e[r],t+r)}get length(){return this.indexedTriples.length}triples(){return this.indexedTriples.map(([e,t,r])=>[this.stringIndex.getValue(e),this.stringIndex.getValue(t),this.stringIndex.getValue(r)])}getTriple(e){if(e<0||e>=this.indexedTriples.length)return;let[t,r,n]=this.indexedTriples[e];return[this.stringIndex.getValue(t),this.stringIndex.getValue(r),this.stringIndex.getValue(n)]}getSourceTypeSet(e){let t=this.stringIndex.getIndex(e);return t!==void 0?this.sourceType.get(t):void 0}getSourceIdSet(e){let t=this.stringIndex.getIndex(e);return t!==void 0?this.sourceId.get(t):void 0}getSourceQsSet(e,t){let r=this.stringIndex.getIndex(`${e}=${t}`);return r!==void 0?this.sourceQs.get(r):void 0}getRelationSet(e){let t=this.stringIndex.getIndex(e);return t!==void 0?this.relations.get(t):void 0}getTargetTypeSet(e){let t=this.stringIndex.getIndex(e);return t!==void 0?this.targetType.get(t):void 0}getTargetIdSet(e){let t=this.stringIndex.getIndex(e);return t!==void 0?this.targetId.get(t):void 0}getTargetQsSet(e,t){let r=this.stringIndex.getIndex(`${e}=${t}`);return r!==void 0?this.targetQs.get(r):void 0}};var o=class{static source(e){return e[0]}static relation(e){return e[1]}static target(e){return e[2]}},S=class d{index;triplesCount;constructor(e){this.index=new x(e),this.triplesCount=this.index.length}static of(e){return new d(e)}static from(e){let t=[];for(let r of e){let{id:n,...i}=r;for(let[g,u]of Object.entries(i))if(Array.isArray(u))for(let s of u)t.push([n,g,s]);else t.push([n,g,u])}return new d(t)}add(e){this.index.add(e),this.triplesCount=this.index.length}map(e){return new d(this.index.triples().map(e))}flatMap(e){let t=this.index.triples().flatMap(e);return new d(t)}first(){return this.index.length>0?this.index.getTriple(0):void 0}firstSource(){let e=this.first();return e?o.source(e):void 0}firstRelation(){let e=this.first();return e?o.relation(e):void 0}firstTarget(){let e=this.first();return e?o.target(e):void 0}triples(){return this.index.triples()}sources(){return new Set(this.index.triples().map(e=>o.source(e)))}relations(){return new Set(this.index.triples().map(e=>o.relation(e)))}targets(){return new Set(this.index.triples().map(e=>o.target(e)))}objects(){let e={};for(let[r,n,i]of this.index.triples())e[r]||(e[r]={}),e[r][n]?Array.isArray(e[r][n])?e[r][n].push(i):e[r][n]=[e[r][n],i]:e[r][n]=i;let t=[];for(let[r,n]of Object.entries(e))n.id=r,t.push(n);return t}search(e){let t=[new Set(Array.from({length:this.triplesCount},(s,a)=>a))],r=e.source,n=e.relation,i=e.target;if(r){if(r.type){let s=this.index.getSourceTypeSet(r.type);if(s)t.push(s);else return new d([])}if(r.id){let s=this.index.getSourceIdSet(r.id);if(s)t.push(s);else return new d([])}if(r.qs)for(let[s,a]of Object.entries(r.qs)){let p=this.index.getSourceQsSet(s,a);if(p)t.push(p);else return new d([])}}if(i){if(i.type){let s=this.index.getTargetTypeSet(i.type);if(s)t.push(s);else return new d([])}if(i.id){let s=this.index.getTargetIdSet(i.id);if(s)t.push(s);else return new d([])}if(i.qs)for(let[s,a]of Object.entries(i.qs)){let p=this.index.getTargetQsSet(s,a);if(p)t.push(p);else return new d([])}}if(n){let s=this.index.getRelationSet(n);if(s)t.push(s);else return new d([])}let g=f.intersection(t),u=[];for(let s of g){let a=this.index.getTriple(s);if(r?.predicate||i?.predicate){let p=r?.predicate?r.predicate(o.source(a)):!0,h=i?.predicate?i.predicate(o.target(a)):!0;p&&h&&u.push(a)}else u.push(a)}return new d(u)}searchArray(e){return this.search(e).triples()}};export{S as TribbleDB,o as Triples,I as asUrn,m as parseUrn};
//# sourceMappingURL=mod.ts.map
