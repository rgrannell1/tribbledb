function b(i,t="urn:r\xF3"){return typeof i=="string"&&i.startsWith(`urn:${t}:`)}function y(i,t="r\xF3"){if(!i.startsWith(`urn:${t}:`))throw new Error(`Invalid URN for namespace ${t}: ${i}`);let r=i.split(":")[2],[e,n]=i.split("?"),s=e.split(":")[3],a=n?Object.fromEntries(new URLSearchParams(n)):{};return{type:r,id:s,qs:a}}function d(i,t="r\xF3"){try{return y(i,t)}catch{return{type:"unknown",id:i,qs:{}}}}var u=class{triples;sourceType;sourceId;sourceQs;relations;targetType;targetId;targetQs;constructor(t){this.triples=t,this.sourceType=new Map,this.sourceId=new Map,this.sourceQs=new Map,this.relations=new Map,this.targetType=new Map,this.targetId=new Map,this.targetQs=new Map,this.indexTriples()}indexTriples(){for(let t=0;t<this.triples.length;t++)this.indexTriple(this.triples[t],t)}indexTriple(t,r){let e=d(c.source(t)),n=c.relation(t),s=d(c.target(t));this.sourceType.has(e.type)||this.sourceType.set(e.type,new Set),this.sourceType.get(e.type).add(r),this.sourceId.has(e.id)||this.sourceId.set(e.id,new Set),this.sourceId.get(e.id).add(r);for(let[a,p]of Object.entries(e.qs))this.sourceQs.has(`${a}=${p}`)||this.sourceQs.set(`${a}=${p}`,new Set),this.sourceQs.get(`${a}=${p}`).add(r);this.relations.has(n)||this.relations.set(n,new Set),this.relations.get(n).add(r),this.targetType.has(s.type)||this.targetType.set(s.type,new Set),this.targetType.get(s.type).add(r),this.targetId.has(s.id)||this.targetId.set(s.id,new Set),this.targetId.get(s.id).add(r);for(let[a,p]of Object.entries(s.qs))this.targetQs.has(`${a}=${p}`)||this.targetQs.set(`${a}=${p}`,new Set),this.targetQs.get(`${a}=${p}`).add(r)}add(t){let r=this.triples.length;this.triples.push(...t);for(let e=0;e<t.length;e++)this.indexTriple(t[e],r+e)}};var g=class{static intersection(t){if(t.length===0)return new Set;t.sort((e,n)=>e.size-n.size);let r=new Set(t[0]);for(let e=1;e<t.length;e++){let n=t[e];for(let s of r)n.has(s)||r.delete(s);if(r.size===0)break}return r}};var c=class{static source(t){return t[0]}static relation(t){return t[1]}static target(t){return t[2]}},f=class i{index;triplesCount;constructor(t){this.index=new u(t),this.triplesCount=t.length}static of(t){return new i(t)}static from(t){let r=[];for(let e of t){let{id:n,...s}=e;for(let[a,p]of Object.entries(s))if(Array.isArray(p))for(let o of p)r.push([n,a,o]);else r.push([n,a,p])}return new i(r)}add(t){this.index.add(t),this.triplesCount+=t.length}map(t){return new i(this.index.triples.map(t))}flatMap(t){let r=this.index.triples.flatMap(t);return new i(r)}first(){return this.index.triples.length>0?this.index.triples[0]:void 0}triples(){return this.index.triples}sources(){return new Set(this.index.triples.map(t=>c.source(t)))}relations(){return new Set(this.index.triples.map(t=>c.relation(t)))}targets(){return new Set(this.index.triples.map(t=>c.target(t)))}objects(){let t={};for(let[e,n,s]of this.index.triples)t[e]||(t[e]={}),t[e][n]?Array.isArray(t[e][n])?t[e][n].push(s):t[e][n]=[t[e][n],s]:t[e][n]=s;let r=[];for(let[e,n]of Object.entries(t))n.id=e,r.push(n);return r}search(t){let r=[new Set(Array.from({length:this.triplesCount},(o,l)=>l))],e=t.source,n=t.relation,s=t.target;if(e){if(e.type){let o=this.index.sourceType.get(e.type);if(o)r.push(o);else return new i([])}if(e.id){let o=this.index.sourceId.get(e.id);if(o)r.push(o);else return new i([])}if(e.qs)for(let[o,l]of Object.entries(e.qs)){let h=this.index.sourceQs.get(`${o}=${l}`);if(h)r.push(h);else return new i([])}}if(s){if(s.type){let o=this.index.targetType.get(s.type);if(o)r.push(o);else return new i([])}if(s.id){let o=this.index.targetId.get(s.id);if(o)r.push(o);else return new i([])}if(s.qs)for(let[o,l]of Object.entries(s.qs)){let h=this.index.targetQs.get(`${o}=${l}`);if(h)r.push(h);else return new i([])}}if(n){let o=this.index.relations.get(n);if(o)r.push(o);else return new i([])}let a=g.intersection(r),p=[];for(let o of a){let l=this.index.triples[o];if(e?.predicate||s?.predicate){let h=e?.predicate?e.predicate(c.source(l)):!0,T=s?.predicate?s.predicate(c.target(l)):!0;h&&T&&p.push(l)}else p.push(l)}return new i(p)}searchArray(t){return this.search(t).triples()}};export{f as TribbleDB,c as Triples,b as isURN};
//# sourceMappingURL=mod.ts.map
