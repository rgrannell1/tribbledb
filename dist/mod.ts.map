{
  "version": 3,
  "sources": ["../types.ts", "../predicates.ts", "../index.ts"],
  "sourcesContent": ["\nexport type URN = string & `urn:r\u00F3:${string}`\nexport type Thing = string | URN;\nexport type Relation = string;\nexport type Triple = [Thing, Relation, Thing];\n\nexport function isURN(thing: Thing): thing is URN {\n  return typeof thing === 'string' && thing.startsWith('urn:r\u00F3:');\n}\n\nexport type Pattern =\n// exact matches\nstring |\n// predicates on the value\n((val:string) => boolean);\n\nexport type TripleObject = Record<string, string | string[]>\nexport type Predicate = (val: string) => boolean;\n", "\nimport { Predicate } from \"./types.ts\";\n\nexport function Truth(_: string) {\n  return true;\n}\n\nexport function Falsity(_: string) {\n  return false;\n}\n\nexport function All(...preds: Predicate[]) {\n  return (value: string) => preds.every(pred => pred(value));\n}\n\nexport function Any(...preds: Predicate[]) {\n  return (value: string) => preds.some(pred => pred(value));\n}\n\nexport function Not(predicate: Predicate) {\n  return (value: string) => !predicate(value);\n}\n\n/*\n * URN specifics\n */\nexport function IsUrn(namespace: string = 'r\u00F3') {\n  return (value: string) => {\n    return value.startsWith(`urn:${namespace}:`);\n  };\n}\n", "\nimport { Pattern, Triple, TripleObject } from \"./types.ts\";\nimport { Truth } from \"./predicates.ts\";\n\nexport class Triples {\n  static source(triple: Triple): string {\n    return triple[0];\n  }\n\n  static relation(triple: Triple): string {\n    return triple[1];\n  }\n\n  static target(triple: Triple): string {\n    return triple[2];\n  }\n}\n\nexport class TribbleDB {\n  #triples: Triple[] = [];\n\n  constructor(triples: Triple[] = []) {\n    this.#triples = triples;\n  }\n\n  static from(objects: TripleObject[]): TribbleDB {\n    const triples: Triple[] = [];\n\n    for (const obj of objects) {\n      const { id, ...relations } = obj;\n\n      for (const [relation, target] of Object.entries(relations)) {\n        if (Array.isArray(target)) {\n          for (const sub of target) {\n            triples.push([id as string, relation, sub]);\n          }\n        } else {\n          triples.push([id as string, relation, target]);\n        }\n      }\n    }\n\n    return new TribbleDB(triples);\n  }\n\n  add(triples: Triple[]): void {\n    this.#triples.push(...triples);\n  }\n\n  #matches(pattern: Pattern, value: string): boolean {\n    if (typeof pattern === 'string') {\n      return pattern === value;\n    } else if (typeof pattern === 'function') {\n      return pattern(value);\n    }\n    return false;\n  }\n\n  /**\n   * Finds triples in the database that match the given patterns.\n   *\n   * @param source   - The pattern for the source of the triple.\n   * @param relation - The pattern for the relation of the triple.\n   * @param target   - The pattern for the target of the triple.\n   *\n   * @returns A new TribbleDB instance containing matching triples.\n   */\n  find(source: Pattern, relation: Pattern, target: Pattern) {\n    return new TribbleDB(this.#triples.filter(triple => {\n      return this.#matches(source, Triples.source(triple)) &&\n              this.#matches(relation, Triples.relation(triple)) &&\n              this.#matches(target, Triples.target(triple));\n    }));\n  }\n\n  exists(source: Pattern = Truth, relation: Pattern = Truth, target: Pattern = Truth): boolean {\n    return this.#triples.some(triple => {\n      return this.#matches(source, Triples.source(triple)) &&\n             this.#matches(relation, Triples.relation(triple)) &&\n             this.#matches(target, Triples.target(triple));\n    });\n  }\n\n\n  hasSource(source: Pattern): boolean {\n    return this.#triples.some(triple => this.#matches(source, Triples.source(triple)));\n  }\n\n  hasRelation(relation: Pattern): boolean {\n    return this.#triples.some(triple => this.#matches(relation, Triples.relation(triple)));\n  }\n\n  hasTarget(target: Pattern): boolean {\n    return this.#triples.some(triple => this.#matches(target, Triples.target(triple)));\n  }\n\n  triples(): Triple[] {\n    return this.#triples;\n  }\n  sources(): Set<string> {\n    return new Set(this.#triples.map(triple => Triples.source(triple)));\n  }\n\n  relations(): Set<string> {\n    return new Set(this.#triples.map(triple => Triples.relation(triple)));\n  }\n\n  targets(): Set<string> {\n    return new Set(this.#triples.map(triple => Triples.target(triple)));\n  }\n\n  objects(): TripleObject[] {\n    const objs: Record<string, TripleObject> = {};\n\n    for (const [source, relation, target] of this.#triples) {\n      if (!objs[source]) {\n        objs[source] = {};\n      }\n      if (!objs[source][relation]) {\n        objs[source][relation] = target;\n      }\n\n      else if (Array.isArray(objs[source][relation])) {\n        (objs[source][relation] as string[]).push(target);\n      } else {\n        objs[source][relation] = [objs[source][relation] as string, target];\n      }\n    }\n\n    const output: TripleObject[] = [];\n\n    for (const [id, obj] of Object.entries(objs)) {\n      obj.id = id;\n      output.push(obj);\n    }\n\n    return output;\n  }\n}\n"],
  "mappings": "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",
  "names": ["isURN", "thing", "Truth", "_", "Falsity", "All", "preds", "value", "pred", "Any", "Not", "predicate", "IsUrn", "namespace", "Triples", "triple", "TribbleDB", "_TribbleDB", "#triples", "triples", "objects", "obj", "id", "relations", "relation", "target", "sub", "#matches", "pattern", "value", "source", "Truth", "objs", "output"]
}
